package recursion;

public class Main{

	public static void main(String[]args) {
		System.out.println(S(7));
		System.out.println(f(7));
		System.out.println(Z(7));
		System.out.println(ex4(18));
		System.out.println(ex5(18,6));
		System.out.println(ex6(20,9));
		System.out.println(ex7(7,14));
		System.out.println(ex8(7,2));
		System.out.println(ex9(11));
	}

	public static int S(int m) {
		if(m == 0) {
			return 0;
		}
		return m + S(m - 1);
	}
	
	public static int f(int n) {
		if(n == 0) {
			return 1;
		}
		return n * f(n - 1);
	}

	public static int Z(int x) {
		if(x == 1) {
			return 1;
		}
		if(x % 2 != 0) {
			return x * Z(x - 2);
		} else {
			return Z(x - 1);
		}
	}


	public static int ex4(int c) {
		if(c < 10) {
			return 1;
		}
		return 1 + ex4(c / 10);
	}
 
 public static int ex5(int dividend, int divisor) {
    if (dividend < divisor) {
        return 0;
    }
    return 1 + ex5(dividend - divisor, divisor);
}

public static int ex6(int dividend, int divisor) {
    if (dividend < divisor) {
        return dividend;
    }
    return ex6(dividend - divisor, divisor);
}

public static boolean ex7 (int x, int y) {
		if (x == 0) {
            return false; 
        }
		if (x == y) {
            return true;
        }
		if (y < x) {
            return false;
        }
		return ex7(y - x, x);
}

public static boolean ex8(int number, int divisor) {
		if( number < 2 || number % divisor == 0 )
		{
			return false;
		}
		if (divisor * divisor > number )
		{
			return true;
		}
		
		return ex8(number, divisor + 1);
	
	}

public static boolean ex9(int number) {
	 if (number < 10) {
	        return true;
	    }
	    int lastDigit = number % 10;
	    int secondLastDigit = (number / 10) % 10;
	    if ((lastDigit % 2) != (secondLastDigit % 2)) {
	        return false;
	    }
	    return ex9 (number / 10);
	}

}
